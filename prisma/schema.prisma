// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Products {
  id    String @id @default(uuid())
  name  String
  price Float
  brand String
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  role       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Customer {
  customer_id    String     @id @default(uuid())
  first_name     String
  last_name      String
  email          String     @unique
  password       String
  address        String?
  phone_number   String     @unique
  profile_image  String?
  status         String
  otp_code       String?
  otp_expires_at DateTime?
  google_id      String?    @unique
  location       String
  carts          Cart[]
  addresses      Address[]
  wishlists      Wishlist[]
  orders         Order[]
  payments       Payment[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Address {
  address_id    String      @id @default(uuid())
  street        String
  city          String
  state         String
  postal_code   String
  country       String
  customer_id   String
  customer      Customer @relation(fields: [customer_id], references: [customer_id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Wishlist {
  wishlist_id String            @id @default(uuid())
  customer_id String
  customer    Customer          @relation(fields: [customer_id], references: [customer_id])
  products    WishlistProduct[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model WishlistProduct {
  wishlist_id String
  product_id  String
  product     Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  wishlist    Wishlist @relation(fields: [wishlist_id], references: [wishlist_id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([wishlist_id, product_id])
}

model Product {
  product_id    String            @id @default(uuid())
  name          String // New field
  SKU           String            @unique
  description   String
  price         String // Changed from Decimal to String
  original_price  String? // New field
  discounted_price String? // New field
  promo_code      String?  // New field
  stock         String // Changed from Int to String
  category_id   String
  category      Category          @relation(fields: [category_id], references: [category_id])
  orderItems    Order_Item[]
  carts         Cart[]
  wishlistItems WishlistProduct[]
  images        ProductImage[]
  trending      String
  status        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ProductImage {
  image_id   String  @id @default(uuid())
  url        String
  product_id String
  product    Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Cart {
  cart_id     String   @id @default(uuid())
  quantity    Int
  customer_id String
  product_id  String // New field
  product     Product  @relation(fields: [product_id], references: [product_id])
  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  category_id String    @id @default(uuid())
  name        String
  image       String
  status      String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  order_id    String          @id @default(uuid())
  order_date  DateTime
  total_price Decimal
  customer_id String
  customer    Customer        @relation(fields: [customer_id], references: [customer_id])
  orderItems  Order_Item[]
  tracking    OrderTracking[]
  shipments   Shipment[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Order_Item {
  order_item_id String   @id @default(uuid())
  quantity      Int
  price         Decimal
  order_id      String
  product_id    String
  order         Order    @relation(fields: [order_id], references: [order_id])
  product       Product  @relation(fields: [product_id], references: [product_id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  payment_id     String        @id @default(uuid())
  payment_date   DateTime
  payment_method PaymentMethod
  payment_status String
  amount         Decimal
  customer_id    String
  customer       Customer      @relation(fields: [customer_id], references: [customer_id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum PaymentMethod {
  UPI
  COD
  CARD
  NETBANKING
}

model Shipment {
  shipment_id   String   @id @default(uuid())
  shipment_date DateTime
  address       String
  city          String
  state         String
  country       String
  zip_code      String
  status        String
  order_id      String
  order         Order    @relation(fields: [order_id], references: [order_id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OrderTracking {
  tracking_id String   @id @default(uuid())
  order_id    String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [order_id], references: [order_id])
}
